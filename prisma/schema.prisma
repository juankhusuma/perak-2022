generator client {
    provider = "prisma-client-js"
}

datasource db {
    // provider = "postgresql"
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    awsImage      String?
    fullName      String?
    dob           DateTime?
    city          String?
    elementTypeId String?
    elementType   ElementType?  @relation(fields: [elementTypeId], references: [id])
    generationId  String?
    generation    Generation?   @relation(fields: [generationId], references: [id])
    phoneNumber   String?
    lineId        String?
    isOnboarded   Boolean?
    accounts      Account[]
    sessions      Session[]
    participant   Participant[]
}

model Participant {
    id           String   @id @default(cuid())
    ign          String?
    User         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String?
    Team         Team?    @relation("Member", fields: [teamId], references: [id], onDelete: Cascade)
    teamId       String?
    LeadOnTeam   Team?
    game         Game?    @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId       String?
    isIndividual Boolean?
}

model Game {
    id             String          @id @default(cuid())
    name           String?
    gameTypeId     String?
    gameType       GameType?       @relation(fields: [gameTypeId], references: [id])
    teamCost       Int?
    individualCost Int?
    startDate      DateTime?
    endDate        DateTime?
    minimumMembers Int?
    maximumMembers Int?
    idealMembers   Int?
    lineGroup      String?
    paymentMethod  PaymentMethod[]
    Team           Team[]
    Participant    Participant[]
}

model Team {
    id           String        @id @default(cuid())
    name         String?
    logo         String?
    gameId       String?
    game         Game?         @relation(fields: [gameId], references: [id], onDelete: Cascade)
    leaderId     String?       @unique
    leader       Participant?  @relation(fields: [leaderId], references: [id], onDelete: SetNull)
    member       Participant[] @relation("Member")
    teamStatus   TeamStatus?   @relation(fields: [teamStatusId], references: [id])
    teamStatusId String
}

model Generation {
    id   String  @id @default(cuid())
    name String?
    year Int?
    User User[]
}

model ElementType {
    id   String  @id @default(cuid())
    name String?
    User User[]
}

model GameType {
    id   String  @id @default(cuid())
    name String?
    Game Game[]
}

model PaymentMethod {
    id          String  @id @default(cuid())
    accountNo   Int?
    accountName String?
    Game        Game?   @relation(fields: [gameId], references: [id])
    gameId      String?
}

model TeamStatus {
    id   String  @id @default(cuid())
    name String? @unique
    Team Team[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

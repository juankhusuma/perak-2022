generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @unique @default(cuid())
    slug          String?       @unique
    name          String?
    email         String?       @unique
    password      String?
    emailVerified DateTime?
    image         String?
    awsImage      String?
    fullName      String?
    dob           DateTime?
    city          String?
    elementTypeId String?
    elementType   ElementType?  @relation(fields: [elementTypeId], references: [id], onDelete: SetNull)
    generationId  String?
    generation    Generation?   @relation(fields: [generationId], references: [id], onDelete: SetNull)
    phoneNumber   String?
    lineId        String?
    isOnboarded   Boolean?      @default(false)
    accounts      Account[]
    sessions      Session[]
    participant   Participant[]
    SnakeScore    SnakeScore?
    TetrisScore   TetrisScore?
    submission    Submission[]
    scanMeScore   Int?
}

// gak bisa store rank
model SnakeScore {
    id        String  @id @default(cuid())
    userId    String? @unique
    user      User?   @relation(fields: [userId], references: [id])
    currScore Int     @default(0)
    highScore Int     @default(0)
    attempts  Int     @default(0)
}

model TetrisScore {
    id        String  @id @default(cuid())
    userId    String? @unique
    user      User?   @relation(fields: [userId], references: [id])
    currScore Int?    @default(0)
    highScore Int?    @default(0)
    attempts  Int?    @default(0)
}

model Schedule {
    id        String    @id @default(cuid())
    title     String?
    game      Game?     @relation(fields: [gameId], references: [id])
    gameId    String?
    team      Team[]
    teamId    String?
    startDate String?
    date      DateTime?
}

model Result {
    id         String    @id @default(cuid())
    title      String?
    game       Game?     @relation(fields: [gameId], references: [id])
    gameId     String?
    team       Team[]
    team1Score String?
    team2Score String?
    date       DateTime?
    score      Int[]
    videoLink  String?
}

model Live {
    id         String    @id @default(cuid())
    title      String?
    game       Game?     @relation(fields: [gameId], references: [id])
    gameId     String?
    team       Team[]
    team1Score String?
    team2Score String?
    date       DateTime?
    link       String?
}

model Challenge {
    id          String       @id @default(cuid())
    description String?
    submission  Submission[]
    clue        String?
}

model Submission {
    id                String           @id @default(cuid())
    createdAt         DateTime         @default(now())
    updatedAt         DateTime         @updatedAt
    submisionUrl      String?
    Challenge         Challenge?       @relation(fields: [challengeId], references: [id])
    challengeId       String?
    status            ChallengeStatus? @relation(fields: [challengeStatusId], references: [name])
    challengeStatusId String?
    User              User?            @relation(fields: [userId], references: [id])
    userId            String?
}

// kalo daftar solo di game team, teamnya bakal null
model Participant {
    id         String  @id @default(cuid())
    ign        String?
    User       User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String?
    Team       Team?   @relation("Member", fields: [teamId], references: [id], onDelete: Cascade)
    teamId     String?
    LeadOnTeam Team?
    game       Game?   @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId     String?
}

// daftar game solo, tetep ngebuat team tapi isIndividual = true
model Game {
    id             String          @id @default(cuid())
    slug           String?         @unique
    name           String?         @unique
    gameTypeName   String?
    gameType       GameType?       @relation(fields: [gameTypeName], references: [name])
    teamCost       Int?
    individualCost Int?
    startDate      DateTime?
    endDate        DateTime?
    minimumMembers Int?
    maximumMembers Int?
    idealMembers   Int?
    lineGroup      String?
    paymentMethod  PaymentMethod[]
    isIndividual   Boolean?
    Team           Team[]
    Live           Live[]
    Participant    Participant[]
    Schedule       Schedule[]
    Result         Result[]
}

model Team {
    id                  String         @id @default(cuid())
    slug                String?        @unique
    name                String?        @unique
    logo                String?
    ign                 String?
    gameId              String?
    game                Game?          @relation(fields: [gameId], references: [id], onDelete: Cascade)
    leaderId            String?        @unique
    leader              Participant?   @relation(fields: [leaderId], references: [id], onDelete: SetNull)
    member              Participant[]  @relation("Member")
    paymentMethod       PaymentMethod? @relation(fields: [paymentMethodId], references: [id], onDelete: SetNull)
    paymentReceipt      String?
    teamStatus          TeamStatus?    @relation(fields: [teamStatusId], references: [id], onDelete: SetNull)
    teamStatusId        String?
    paymentMethodId     String?
    isTeamButIndividual Boolean?       @default(false)
    Schedule            Schedule[]
    Result              Result[]
    Live                Live[]
    familyGameScore     Int?
}

model Generation {
    id   String  @id @default(cuid())
    name String?
    year Int?
    User User[]
}

model ElementType {
    id   String  @id @default(cuid())
    name String?
    User User[]
}

model GameType {
    id   String  @id @default(cuid())
    name String? @unique
    Game Game[]
}

model PaymentMethod {
    id              String  @id @default(cuid())
    accountNo       String?
    accountName     String?
    accountProvider String?
    Game            Game[]
    Team            Team[]
}

model TeamStatus {
    id      String  @id @default(cuid())
    name    String? @unique
    message String?
    Team    Team[]
}

model ChallengeStatus {
    id         String       @id @default(cuid())
    name       String?      @unique
    Submission Submission[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model TrendingNews {
    id    String  @id @default(cuid())
    title String?
    image String?
}
